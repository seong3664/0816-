void overTrigerEver(Colider otrher)
{
	AmmoPack ammoPack = other.GetComponent,AmmoPack();
	if(ammoPack != null)
	{
	ammoPack.Use();
	}
	HelthPack helthPack Pack = other.GetComponent.HelthPack ();
	if (helthPack != null)
	{
	 helthPack.Use();
	}
}
위의 내용처럼 일일히 if문으로 충돌 처리를 설정해 검사하면 매우 나쁜 코드가 된다.
그렇기 떄문에 인터페이스를 쓴다.
인터페이스를 쓰면 일일히 어떤 것인지 검사하지 않고
item을 상속한 클래스에서 알아서 상황에 맞게
코드를 구현 하면 된다.(C# 느슨한 커플링)
느슨한 커플링은 어떤 코드가 특정 클래스의 구현에 결합되지 않아
유연하게 변경 가능 한 상태를 가르키는 용어이다.

다형성 오버라이드에 대해서 배워 보도록 하자
객체지향의 3대요소중 하나
상속성,다형성,은닉성

오버라이드:다형성 이름은 같지만 하는 일은 다르다.
오버라이드를 활용하면 다양한 자식 클래스 타입이 같은 이름의
매서드를 실행하되 실제 처리는 가각 다르게 만들 수 있다.
livingentity 기반 클래스
적AI와 플레이어는 같은 생명체.
  .체력을 가진다
  .체력을 회복 할 수 있다.
  .공격을 받을 수 있다.
  .살거나 죽을 수 있다.
  
상속을 하는 이유는 확장성 때문이다.
확장성이란 원래 있던 프로젝트가 더 많은 기능을 확장 할 때
간편하게 확장 할 수 있어야 된다는 의미이다.
즉 코드를 간결하고 짧게 줄이는 방향이 확장성이다.

최종 완성과 포스트 프로세싱(후처리)

스폰 포인트 랜덤하게 생성
체력이 어떤것은 많고 어떤 것은 적다.
색깔로 구분해서 구성

적생성기 Wave 
새로운 웨이브가 시작될 때마다 적을 한꺼번에 생성
현재 웨이브의 적이 모두 사망해야 다음 웨이브로 넘어감
웨이브가 증가 할 때마다 한번에 생성되는 적 수 증가
적을 생성할 때 전체 능력치가 0%에서 100%사이의 랜덤 설정
게임 오버시 적 생성 중단

다음 시간엔 아이템 생성, 주울시 체력 회복,탄약 충전
1.주기적 아이템 생성
2.플레이어 근처의 내비매쉬위에 랜덤한 한 점을 선택해서 아이템 생성 위치로 사용